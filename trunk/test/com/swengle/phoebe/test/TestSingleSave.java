/**
 * 
 */
package com.swengle.phoebe.test;

import static org.junit.Assert.fail;

import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.swengle.phoebe.Phoebe;
import com.swengle.phoebe.datastore.DuplicateEntityException;
import com.swengle.phoebe.test.model.EntityWithAutoGeneratedHashKey;
import com.swengle.phoebe.test.model.EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey;
import com.swengle.phoebe.test.model.EntityWithAutoGeneratedHashKeyAndRangeKey;
import com.swengle.phoebe.test.model.EntityWithHashKeyAndAutoGeneratedRangeKey;
import com.swengle.phoebe.test.model.EntityWithHashKeyAndRangeKey;
import com.swengle.phoebe.test.model.EntityWithJustHashKey;
import com.swengle.phoebe.test.model.EntityWithJustHashKeyAndJustRangeKey;


/**
 * @author Administrator
 *
 */
public class TestSingleSave extends TestBase {
	private Phoebe phoebe = TestBase.PHOEBE;
	
	@Before
	public void setUp() {
		emptyAll();
	}

	@Test
	public void testPutEntityWithJustHashKey() {
		EntityWithJustHashKey entityWithJustHashKey = new EntityWithJustHashKey();
		try {
			phoebe.getDatastore().put(entityWithJustHashKey);
			fail("Expected failure when saving EntityWithJustHashKey with unset hashKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String hashKey = new ObjectId().toString();
		entityWithJustHashKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithJustHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithHashKey with hashKey set, " + e.toString());
		}

		EntityWithJustHashKey read = phoebe.getDatastore().get(EntityWithJustHashKey.class, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
	}
	
	
	@Test
	public void testInsertEntityWithJustHashKey() {
		EntityWithJustHashKey entityWithJustHashKey = new EntityWithJustHashKey();
		try {
			phoebe.getDatastore().insert(entityWithJustHashKey);
			fail("Expected failure when saving EntityWithJustHashKey with unset hashKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String hashKey = new ObjectId().toString();
		entityWithJustHashKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().insert(entityWithJustHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithHashKey with hashKey set, " + e.toString());
		}

		EntityWithJustHashKey read = phoebe.getDatastore().get(EntityWithJustHashKey.class, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));

		
		try {
			phoebe.getDatastore().insert(entityWithJustHashKey);
			fail("Expected failure when saving duplicate EntityWithJustHashKey");
		} catch (DuplicateEntityException e) {
			// ignore
		}
	}
	
	
	@Test
	public void testPutEntityWithJustHashKeyAndJustRangeKey() {
		EntityWithJustHashKeyAndJustRangeKey entityWithJustHashKeyAndJustRangeKey = new EntityWithJustHashKeyAndJustRangeKey();
		try {
			phoebe.getDatastore().put(entityWithJustHashKeyAndJustRangeKey);
			fail("Expected failure when saving EntityWithJustHashKeyAndJustRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String hashKey = new ObjectId().toString();
		String rangeKey = new ObjectId().toString();
		entityWithJustHashKeyAndJustRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithJustHashKeyAndJustRangeKey);
			fail("Expected failure when saving EntityWithJustHashKeyAndJustRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		entityWithJustHashKeyAndJustRangeKey.setRangeKey(rangeKey);
		try {
			phoebe.getDatastore().put(entityWithJustHashKeyAndJustRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithJustHashKeyAndJustRangeKey with hashKey and rangeKey set, " + e.toString());
		}

		EntityWithJustHashKeyAndJustRangeKey read = phoebe.getDatastore().get(EntityWithJustHashKeyAndJustRangeKey.class, hashKey, rangeKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getRangeKey().equals(rangeKey));
	}

	
	@Test
	public void testInsertEntityWithJustHashKeyAndJustRangeKey() {
		EntityWithJustHashKeyAndJustRangeKey entityWithJustHashKeyAndJustRangeKey = new EntityWithJustHashKeyAndJustRangeKey();
		try {
			phoebe.getDatastore().insert(entityWithJustHashKeyAndJustRangeKey);
			fail("Expected failure when saving EntityWithJustHashKeyAndJustRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String hashKey = new ObjectId().toString();
		String rangeKey = new ObjectId().toString();
		entityWithJustHashKeyAndJustRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().insert(entityWithJustHashKeyAndJustRangeKey);
			fail("Expected failure when saving EntityWithJustHashKeyAndJustRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		entityWithJustHashKeyAndJustRangeKey.setRangeKey(rangeKey);
		try {
			phoebe.getDatastore().insert(entityWithJustHashKeyAndJustRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithJustHashKeyAndJustRangeKey with hashKey and rangeKey set, " + e.toString());
		}

		EntityWithJustHashKeyAndJustRangeKey read = phoebe.getDatastore().get(EntityWithJustHashKeyAndJustRangeKey.class, hashKey, rangeKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getRangeKey().equals(rangeKey));

		
		try {
			phoebe.getDatastore().insert(entityWithJustHashKeyAndJustRangeKey);
			fail("Expected failure when saving duplicate EntityWithJustHashKeyAndJustRangeKey");
		} catch (DuplicateEntityException e) {
			// ignore
		}
	}
	
	@Test
	public void testPutEntityWithAutoGeneratedHashKey() {
		String hashKey = new ObjectId().toString();
		
		EntityWithAutoGeneratedHashKey entityWithAutoGeneratedHashKey = new EntityWithAutoGeneratedHashKey();
		entityWithAutoGeneratedHashKey.setString(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving object with unset hashKey(DynamoDBAutoGeneratedKey=true), " + e.toString());
		}
		
		Assert.assertTrue(ObjectId.isValid(entityWithAutoGeneratedHashKey.getHashKey()));
		EntityWithAutoGeneratedHashKey read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKey.class, entityWithAutoGeneratedHashKey.getHashKey());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(entityWithAutoGeneratedHashKey.getHashKey()));
		Assert.assertTrue(read.getString().equals(hashKey));
		
		entityWithAutoGeneratedHashKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving object with set hashKey(DynamoDBAutoGeneratedKey=false), " + e.toString());
		}
		
		read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKey.class, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getString().equals(hashKey));
	}
	
	@Test
	public void testPutEntityWithHashKeyAndRangeKey() {
		String hashKey = new ObjectId().toString();
		
		EntityWithHashKeyAndRangeKey entityWithHashKeyAndRangeKey = new EntityWithHashKeyAndRangeKey();
		entityWithHashKeyAndRangeKey.setString(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndRangeKey);
			fail("Expected failure when saving EntityWithHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (Exception e) {
			// ignore
		}
		
		entityWithHashKeyAndRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndRangeKey);
			fail("Expected failure when saving EntityWithHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (Exception e) {
			// ignore
		}
		
		entityWithHashKeyAndRangeKey.setRangeKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and set rangeKey(DynamoDBAutoGeneratedKey=false), " + e.toString());
		}
		
		EntityWithHashKeyAndRangeKey read;
		read = phoebe.getDatastore().get(EntityWithHashKeyAndRangeKey.class, hashKey, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getRangeKey().equals(hashKey));
		Assert.assertTrue(read.getString().equals(hashKey));
	}
	
	@Test
	public void testPutEntityWithAutoGeneratedHashKeyAndRangeKey() {
		String hashKey = new ObjectId().toString();
		
		EntityWithAutoGeneratedHashKeyAndRangeKey entityWithAutoGeneratedHashKeyAndRangeKey = new EntityWithAutoGeneratedHashKeyAndRangeKey();
		entityWithAutoGeneratedHashKeyAndRangeKey.setString(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndRangeKey);
			fail("Expected failure when saving EntityWithAutoGeneratedHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		entityWithAutoGeneratedHashKeyAndRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndRangeKey);
			fail("Expected failure when saving EntityWithAutoGeneratedHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		entityWithAutoGeneratedHashKeyAndRangeKey.setRangeKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithAutoGeneratedHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and set rangeKey(DynamoDBAutoGeneratedKey=false)");
		}
		
		EntityWithAutoGeneratedHashKeyAndRangeKey read;
		read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKeyAndRangeKey.class, hashKey, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getRangeKey().equals(hashKey));
		Assert.assertTrue(read.getString().equals(hashKey));
		
		entityWithAutoGeneratedHashKeyAndRangeKey.setHashKey(null);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithAutoGeneratedHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and set rangeKey(DynamoDBAutoGeneratedKey=false)");
		}
		Assert.assertFalse(entityWithAutoGeneratedHashKeyAndRangeKey.getHashKey().equals(hashKey));
		
	}
	
	@Test
	public void testPutEntityWithHashKeyAndAutoGeneratedRangeKey() {
		String hashKey = new ObjectId().toString();
		EntityWithHashKeyAndAutoGeneratedRangeKey entityWithHashKeyAndAutoGeneratedRangeKey = new EntityWithHashKeyAndAutoGeneratedRangeKey();
		entityWithHashKeyAndAutoGeneratedRangeKey.setString(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndAutoGeneratedRangeKey);
			fail("Expected failure when saving EntityWithHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		entityWithHashKeyAndAutoGeneratedRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndAutoGeneratedRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving EntityWithHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		EntityWithHashKeyAndAutoGeneratedRangeKey read;
		read = phoebe.getDatastore().get(EntityWithHashKeyAndAutoGeneratedRangeKey.class, hashKey, entityWithHashKeyAndAutoGeneratedRangeKey.getRangeKey());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getString().equals(hashKey));
		
		entityWithHashKeyAndAutoGeneratedRangeKey.setHashKey(null);
		entityWithHashKeyAndAutoGeneratedRangeKey.setRangeKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithHashKeyAndAutoGeneratedRangeKey);
			fail("Expected failure when saving EntityWithHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and set rangeKey(DynamoDBAutoGeneratedKey=true)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
	}
	
	
	@Test
	public void testPutObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey() {
		String hashKey = new ObjectId().toString();
		EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey = new EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey();
		entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setString(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey read;
		read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getHashKey(), entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getRangeKey());
		Assert.assertNotNull(read);
		
		entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setHashKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, hashKey, entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getRangeKey());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		
		entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setRangeKey(hashKey);
		try {
			phoebe.getDatastore().put(entityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		read = phoebe.getDatastore().get(EntityWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, hashKey, hashKey);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getHashKey().equals(hashKey));
		Assert.assertTrue(read.getRangeKey().equals(hashKey));
	}

}
