/**
 * 
 */
package com.swengle.phoebe.test;

import static org.junit.Assert.fail;

import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.swengle.phoebe.Phoebe;
import com.swengle.phoebe.datastore.DuplicateEntityException;
import com.swengle.phoebe.test.model.ObjectWithAutoGeneratedHashKey;
import com.swengle.phoebe.test.model.ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey;
import com.swengle.phoebe.test.model.ObjectWithAutoGeneratedHashKeyAndRangeKey;
import com.swengle.phoebe.test.model.ObjectWithHashKey;
import com.swengle.phoebe.test.model.ObjectWithHashKeyAndAutoGeneratedRangeKey;
import com.swengle.phoebe.test.model.ObjectWithHashKeyAndRangeKey;

/**
 * @author Administrator
 *
 */
public class TestSinglePut extends TestBase {
	private Phoebe phoebe = TestBase.PHOEBE;
	
	@Before
	public void setUp() {
		emptyAll();
	}

	@Test
	public void testPutObjectWithHashKey() {
		ObjectWithHashKey objectWithHashKey = new ObjectWithHashKey();
		try {
			phoebe.getDatastore().put(objectWithHashKey);
			fail("Expected failure when saving ObjectWithHashKey with unset hashKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String id = new ObjectId().toString();
		objectWithHashKey.setId(id);
		objectWithHashKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithHashKey with hashKey set, " + e.toString());
		}

		ObjectWithHashKey read = phoebe.getDatastore().get(ObjectWithHashKey.class, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));

	}
	
	
	@Test
	public void testInsertObjectWithHashKey() {
		ObjectWithHashKey objectWithHashKey = new ObjectWithHashKey();
		try {
			phoebe.getDatastore().insert(objectWithHashKey);
			fail("Expected failure when saving ObjectWithHashKey with unset hashKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}

		
		String id = new ObjectId().toString();
		objectWithHashKey.setId(id);
		objectWithHashKey.setFoo(id);
		try {
			phoebe.getDatastore().insert(objectWithHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithHashKey with hashKey set, " + e.toString());
		}

		ObjectWithHashKey read = phoebe.getDatastore().get(ObjectWithHashKey.class, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));
		
		try {
			phoebe.getDatastore().insert(objectWithHashKey);
			fail("Expected failure when saving duplicate ObjectWithHashKey");
		} catch (DuplicateEntityException e) {
			// ignore
		}

	}
	
	@Test
	public void testPutObjectWithAutoGeneratedHashKey() {
		String id = new ObjectId().toString();
		
		ObjectWithAutoGeneratedHashKey objectWithAutoGeneratedHashKey = new ObjectWithAutoGeneratedHashKey();
		objectWithAutoGeneratedHashKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving object with unset hashKey(DynamoDBAutoGeneratedKey=true), " + e.toString());
		}
		
		Assert.assertTrue(ObjectId.isValid(objectWithAutoGeneratedHashKey.getId()));
		ObjectWithAutoGeneratedHashKey read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKey.class, objectWithAutoGeneratedHashKey.getId());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(objectWithAutoGeneratedHashKey.getId()));
		Assert.assertTrue(read.getFoo().equals(id));
		
		objectWithAutoGeneratedHashKey.setId(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving object with set hashKey(DynamoDBAutoGeneratedKey=false), " + e.toString());
		}
		
		read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKey.class, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));
	}
	
	@Test
	public void testPutObjectWithHashKeyAndRangeKey() {
		String id = new ObjectId().toString();
		
		ObjectWithHashKeyAndRangeKey objectWithHashKeyAndRangeKey = new ObjectWithHashKeyAndRangeKey();
		objectWithHashKeyAndRangeKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndRangeKey);
			fail("Expected failure when saving ObjectWithHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (Exception e) {
			// ignore
		}
		
		objectWithHashKeyAndRangeKey.setId(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndRangeKey);
			fail("Expected failure when saving ObjectWithHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (Exception e) {
			// ignore
		}
		
		objectWithHashKeyAndRangeKey.setRangeId(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and set rangeKey(DynamoDBAutoGeneratedKey=false), " + e.toString());
		}
		
		ObjectWithHashKeyAndRangeKey read;
		read = phoebe.getDatastore().get(ObjectWithHashKeyAndRangeKey.class, id, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getRangeId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));
	}
	
	@Test
	public void testPutObjectWithAutoGeneratedHashKeyAndRangeKey() {
		String id = new ObjectId().toString();
		
		ObjectWithAutoGeneratedHashKeyAndRangeKey objectWithAutoGeneratedHashKeyAndRangeKey = new ObjectWithAutoGeneratedHashKeyAndRangeKey();
		objectWithAutoGeneratedHashKeyAndRangeKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndRangeKey);
			fail("Expected failure when saving ObjectWithAutoGeneratedHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		objectWithAutoGeneratedHashKeyAndRangeKey.setId(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndRangeKey);
			fail("Expected failure when saving ObjectWithAutoGeneratedHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=false)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		objectWithAutoGeneratedHashKeyAndRangeKey.setRangeId(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and set rangeKey(DynamoDBAutoGeneratedKey=false)");
		}
		
		ObjectWithAutoGeneratedHashKeyAndRangeKey read;
		read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKeyAndRangeKey.class, id, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getRangeId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));
		
		objectWithAutoGeneratedHashKeyAndRangeKey.setId(null);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and set rangeKey(DynamoDBAutoGeneratedKey=false)");
		}
		Assert.assertFalse(objectWithAutoGeneratedHashKeyAndRangeKey.getId().equals(id));
		
	}
	
	@Test
	public void testPutObjectWithHashKeyAndAutoGeneratedRangeKey() {
		String id = new ObjectId().toString();
		ObjectWithHashKeyAndAutoGeneratedRangeKey objectWithHashKeyAndAutoGeneratedRangeKey = new ObjectWithHashKeyAndAutoGeneratedRangeKey();
		objectWithHashKeyAndAutoGeneratedRangeKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndAutoGeneratedRangeKey);
			fail("Expected failure when saving ObjectWithHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
		
		objectWithHashKeyAndAutoGeneratedRangeKey.setId(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndAutoGeneratedRangeKey);
		} catch (Exception e) {
			fail("Unexpected failure when saving ObjectWithHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=false) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		ObjectWithHashKeyAndAutoGeneratedRangeKey read;
		read = phoebe.getDatastore().get(ObjectWithHashKeyAndAutoGeneratedRangeKey.class, id, objectWithHashKeyAndAutoGeneratedRangeKey.getRangeId());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getFoo().equals(id));
		
		objectWithHashKeyAndAutoGeneratedRangeKey.setId(null);
		objectWithHashKeyAndAutoGeneratedRangeKey.setRangeId(id);
		try {
			phoebe.getDatastore().put(objectWithHashKeyAndAutoGeneratedRangeKey);
			fail("Expected failure when saving ObjectWithHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=false) and set rangeKey(DynamoDBAutoGeneratedKey=true)");
		} catch (IllegalArgumentException e) {
			// ignore
		}
	}
	
	
	@Test
	public void testPutObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey() {
		String id = new ObjectId().toString();
		ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey = new ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey();
		objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setFoo(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with unset hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey read;
		read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getId(), objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getRangeId());
		Assert.assertNotNull(read);
		
		objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setId(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, id, objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.getRangeId());
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		
		objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.setRangeId(id);
		try {
			phoebe.getDatastore().put(objectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey);
		} catch (IllegalArgumentException e) {
			fail("Unexpected failure when saving ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey with set hashKey(DynamoDBAutoGeneratedKey=true) and unset rangeKey(DynamoDBAutoGeneratedKey=true)");
		}
		
		read = phoebe.getDatastore().get(ObjectWithAutoGeneratedHashKeyAndAutoGeneratedRangeKey.class, id, id);
		Assert.assertNotNull(read);
		Assert.assertTrue(read.getId().equals(id));
		Assert.assertTrue(read.getRangeId().equals(id));
	}

}
